<!DOCTYPE html>
<html>
    <head>
        <title>
            More about Function
        </title>
        <link rel="icon" href="images\c++1.png">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <LINK rel="stylesheet" href="stylesheet.css">
    </head>
    <body>
        <h1 id="topic" itemprop="name">Function Overloading and Overriding in C++</h1><hr>
        <div id="content">
            <p>In this chapter, we will be looking into function overloading and function overriding.</p>
            <p>So, let's first start with function overloading.</p>
            <h2>Function overloading</h2><hr>
            <p>Same as constructors, we can also overload functions. Conditions for function overloading are:-</p>
            <ol type="1">
            <li>Functions to be overloaded must have the same name.</li>
            <li>All functions must have different arguments( either a different number of parameters or different type of parameters ).</li>
            </ol>
            <p>Let's see an example.</p><div id="pixfuture160" style="height: 1px;"><iframe id="pixfutureiframe160" onload="manageIframe.add();" scrolling="no" frameborder="0" marginwidth="0" marginheight="0" style="vertical-align: top;  width:100%; height:100%;" allowfullscreen="" __idm_frm__="2362"></iframe></div><div id="adVideoSpace" style="height: 1px;"></div><script type="text/javascript">var corner_video = 'none'; var zone_id = 160; var mobile_allowed = true; var site_id = 4390;</script>
            <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="c"><div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
            
            <span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
            
            <span class="n">class</span> <span class="n">Rectangle</span>
            <span class="p">{</span>
                <span class="nl">public</span><span class="p">:</span>
                    <span class="kt">void</span> <span class="n">printArea</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="kt">void</span> <span class="n">printArea</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="kt">void</span> <span class="n">printArea</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="kt">void</span> <span class="n">printArea</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
            <span class="p">};</span>
            
            <span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Rectangle</span> <span class="n">rt</span><span class="p">;</span>
                <span class="n">rt</span><span class="p">.</span><span class="n">printArea</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
                <span class="n">rt</span><span class="p">.</span><span class="n">printArea</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mf">5.1</span><span class="p">);</span>
                <span class="n">rt</span><span class="p">.</span><span class="n">printArea</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
                <span class="n">rt</span><span class="p">.</span><span class="n">printArea</span><span class="p">(</span><span class="mf">2.3</span><span class="p">);</span>
                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            </pre></div>
            </div>
            <div class="button_output button_outputone" data-target="#one" data-toggle="collapse">
            <span>Output</span>
            </div>
            </div>
            <div class="col-md-12 col-sm-12 col-xs-12 collapse" id="one">
            <div class="code_out code_outone well">
            8<br>
            10.2<br>
            100<br>
            5.29
                        </div>
            </div>
            </div>
            <p>Here, we defined four functions with the same name 'printArea' but different parameters.<br>
            In the main class, firstly the function printArea is called with <strong>2</strong> and <strong>4</strong> passed to it. Since both 2 and 4 are integers, so the function named printArea with both its parameters of type int <strong>(int x, int y)</strong> is called.<br>
            After that, the second function is called with <strong>2</strong> and <strong>5.1</strong> passed to it. Since 2 is of type int and 5.1 is of type double, so the function with the first parameter of type int and the second one of type double <strong>(int x,double y)</strong> is called.<br>
            Similarly, after that the function with only one integer value as its parameter is called and at last, the function with a single double value as its parameter is called.</p>
            <h2>Function Overriding</h2><hr>
            <p>Function overriding is also known as <strong>Polymorphism</strong>. To understand method overriding, let's first look at an example.</p>
            <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="c"><div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
            
            <span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
            
            <span class="n">class</span> <span class="n">Animals</span>
            <span class="p">{</span>
                <span class="nl">public</span><span class="p">:</span>
                    <span class="kt">void</span> <span class="n">sound</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"This is parent class"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
            <span class="p">};</span>
            
            <span class="n">class</span> <span class="nl">Dogs</span> <span class="p">:</span> <span class="n">public</span> <span class="n">Animals</span>
            <span class="p">{</span>
                <span class="nl">public</span><span class="p">:</span>
                    <span class="kt">void</span> <span class="n">sound</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Dogs bark"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
            <span class="p">};</span>
            
            <span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Dogs</span> <span class="n">d</span><span class="p">;</span>
                <span class="n">d</span><span class="p">.</span><span class="n">sound</span><span class="p">();</span>
                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            </pre></div>
            </div>
            <div class="button_output button_outputone" data-target="#two" data-toggle="collapse">
            <span>Output</span>
            </div>
            </div>
            <div class="col-md-12 col-sm-12 col-xs-12 collapse" id="two">
            <div class="code_out code_outone well">
            Dogs bark
                        </div>
            </div>
            </div>
            <p>In the above example, the class 'Dogs' and its parent class 'Animals' have the same function <strong>void sound()</strong>. When the object 'd' of class Dogs calls this function, then the function of the child class 'Dogs' is called, not that of the parent class. Thus, the function of child class overrides the function in parent class when called by an object of the child class.</p>
            <p>This is called <strong>function overriding</strong>.</p>
            <h4>Conditions for Function Overriding</h4>
            <ul>
            <li>Functions of both parent and child class must have the same name.</li>
            <li>Functions must have the same argument list and return type.</li>
            <li>A function declared static cannot be overridden.</li>
            <li>If a function cannot be inherited, it cannot be overridden.</li>
            </ul>
            <div class="well imp_well">
            <div class="row">
            <div class="col-md-1 col-sm-1 well_one">
            <i class="fa fa-code"></i>
            </div>
            <div class="col-md-11 col-sm-11 well_two">
                            Constructors cannot be overridden.
                        </div>
            </div>
            </div>
            <p>Let's see an another example of function overriding.</p>
            <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="c"><div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
            
            <span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
            
            <span class="n">class</span> <span class="n">Animals</span>
            <span class="p">{</span>
                <span class="nl">public</span><span class="p">:</span>
                    <span class="kt">void</span> <span class="n">sound</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"This is parent class"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
            <span class="p">};</span>
            
            <span class="n">class</span> <span class="nl">Dogs</span> <span class="p">:</span> <span class="n">public</span> <span class="n">Animals</span>
            <span class="p">{</span>
                <span class="nl">public</span><span class="p">:</span>
                    <span class="kt">void</span> <span class="n">sound</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Dogs bark"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
            <span class="p">};</span>
            
            <span class="n">class</span> <span class="nl">Cats</span> <span class="p">:</span> <span class="n">public</span> <span class="n">Animals</span>
            <span class="p">{</span>
                <span class="nl">public</span><span class="p">:</span>
                    <span class="kt">void</span> <span class="n">sound</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Cats meow"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
            <span class="p">};</span>
            
            <span class="n">class</span> <span class="nl">Pigs</span> <span class="p">:</span> <span class="n">public</span> <span class="n">Animals</span>
            <span class="p">{</span>
                <span class="nl">public</span><span class="p">:</span>
                    <span class="kt">void</span> <span class="n">sound</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Pigs snort"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="p">}</span>
            <span class="p">};</span>
            
            <span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Dogs</span> <span class="n">d</span><span class="p">;</span>
                <span class="n">Cats</span> <span class="n">c</span><span class="p">;</span>
                <span class="n">Pigs</span> <span class="n">p</span><span class="p">;</span>
                <span class="n">d</span><span class="p">.</span><span class="n">sound</span><span class="p">();</span>
                <span class="n">c</span><span class="p">.</span><span class="n">sound</span><span class="p">();</span>
                <span class="n">p</span><span class="p">.</span><span class="n">sound</span><span class="p">();</span>
                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            </pre></div>
            </div>
            <div class="button_output button_outputone" data-target="#three" data-toggle="collapse">
            <span>Output</span>
            </div>
            </div>
            <div class="col-md-12 col-sm-12 col-xs-12 collapse" id="three">
            <div class="code_out code_outone well">
            Dogs bark<br>
            Cats meow<br>
            Pigs snort
            
                        </div>
            </div>
            </div>
            <div class="well imp_one" style="text-align:center;">
            <p class="quote">Great thoughts reduced by practice become great acts.<br><span style="float:right;">-William Hazlitt</span></p>
            </div>
            <div>
            <a href="arrayOfObjects.htm"><span class="back" style="float:left;font-size:20px;color:black;">Prev</span></a>
            <a href="multipleInheritance.htm"><span style="float:right;font-size:20px;color:black;" class="next">Next</span></a>
            </div>
            </div>
    </body></html>